{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","api/index.js","Components/Chart/Chart.jsx","Components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/CountryPicker/CountryPicker.module.css","Images/Image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changedURL","axios","get","modified_Data","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setdailyData","useEffect","DailyData","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","countryData","setcountryData","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","Image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,oOCwDpJC,EA/CD,SAAC,GAA6D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAUC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,WAGnD,OAAIH,EAIA,yBAAKI,UAAYC,IAAOC,WACpB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAaW,IAAGV,IAAOW,KAAKX,IAAOY,WAC1E,kBAACL,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAOvB,EAAUwB,MAAOC,SAAY,IAAKC,UAAY,OAE5E,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKxB,GAAYyB,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,8BAGR,kBAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAaW,IAAGV,IAAOW,KAAKX,IAAOJ,YAC1E,kBAACW,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAOtB,EAAUuB,MAAOC,SAAY,IAAKC,UAAY,OAE5E,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKxB,GAAYyB,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,yCAGR,kBAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAaW,IAAGV,IAAOW,KAAKX,IAAOH,SAC1E,kBAACU,EAAA,EAAD,KACI,kBAACM,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAOrB,EAAOsB,MAAOC,SAAY,IAAKC,UAAY,OAEzE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKxB,GAAYyB,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,4CAhCT,c,yBCZTQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DAEjBC,EAAaJ,EACdE,IAEKE,EADW,WAAZF,EACcF,EAIH,UAAMA,EAAN,sBAAuBE,IATpB,kBAeiDG,IAAMC,IAAIF,GAf3D,2BAeTlC,KAAQC,EAfC,EAeDA,UAAUE,EAfT,EAeSA,OAAOD,EAfhB,EAegBA,UAAUE,EAf1B,EAe0BA,WAErCiC,EAAgB,CAAEpC,YAAWE,SAAQD,YAAWE,cAjBrC,kBAkBViC,GAlBU,kCAqBjBC,QAAQC,IAAR,MArBiB,0DAAH,sDA0BTC,EAAc,uCAAG,gCAAAP,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,WAFD,uBAEd9B,EAFc,EAEdA,KAEFqC,EAAgBrC,EAAKyC,KAAI,SAACC,GAAD,MAAgB,CAC3CzC,UAAWyC,EAAUzC,UAAU0C,MAC/BxC,OAAQuC,EAAUvC,OAAOwC,MACzBC,KAAOF,EAAUG,eAPC,kBASfR,GATe,gCAWtBC,QAAQC,IAAR,MAXsB,yDAAH,qDAedO,EAAc,uCAAG,8BAAAb,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,eAFD,uBAEd9B,EAFc,EAEdA,KAFc,kBAQfA,EAAK+C,UAAUN,KAAK,SAAET,GAAF,OAAeA,EAAQgB,SAR5B,gCAatBV,QAAQC,IAAR,MAbsB,yDAAH,qD,yBCoCZU,EA3ED,SAAC,GAA2D,IAAD,IAAvDjD,KAASC,EAA8C,EAA9CA,UAAUE,EAAoC,EAApCA,OAAOD,EAA6B,EAA7BA,UAAc8B,EAAe,EAAfA,QAEvC,WAAZA,IACCA,EAAU,IAHuD,MAKnCkB,mBAAS,IAL0B,mBAK9DR,EAL8D,KAKnDS,EALmD,KAMrEC,qBAAW,YAEO,uCAAG,4BAAAnB,EAAA,sEACWO,IADX,OACPa,EADO,OAEbF,EAAaE,GAFA,2CAAH,qDAOdC,KAGD,IAEH,IAAMC,EACFb,EAAUc,OAEV,kBAAC,IAAD,CACGxD,KAAQ,CACPyD,OAAQf,EAAUD,KAAI,qBAAGG,QACzBc,SAAU,CAAC,CACP1D,KAAM0C,EAAUD,KAAI,qBAAGxC,aACvB0D,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACE7D,KAAM0C,EAAUD,KAAI,qBAAGtC,UACvBwD,MAAO,SACPC,YAAa,MACbE,gBAAiB,oBACjBD,MAAM,OAKX,KAEDE,EACF9D,EAGI,kBAAC,IAAD,CACID,KAAQ,CACJyD,OAAQ,CAAC,WAAW,YAAY,UAChCC,SAAU,CAAC,CACPC,MAAO,mBACPG,gBAAiB,CAAC,oBAAoB,oBAAoB,qBAC1D9D,KAAK,CAACC,EAAUwB,MAAOvB,EAAUuB,MAAOtB,EAAOsB,UAIvDuC,QAAW,CACPC,OAAQ,CAACC,SAAQ,GACjBC,MAAO,CAACD,SAAQ,EAAKE,KAAK,oBAAD,OAAsBpC,OAGvD,KAGR,OACI,yBAAK3B,UAAWC,IAAOC,WAEfyB,EAAU+B,EAAWR,I,mCCvCtBc,EA9BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EAETpB,mBAAS,IAFA,mBAExCqB,EAFwC,KAE3BC,EAF2B,KAkB/C,OAfApB,qBAAW,YAEO,uCAAG,sBAAAnB,EAAA,kEACbuC,EADa,SACQ1B,IADR,6EAAH,qDAMdQ,KAGD,CAACkB,IAMA,kBAACC,EAAA,EAAD,CAAapE,UAAWC,IAAOmE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOP,EAAoBO,EAAEC,OAAOrD,SACxE,4BAAQA,MAAM,UAAd,UACC8C,EAAY9B,KAAI,SAACT,EAAS+C,GAAV,OAAgB,4BAAQC,IAAKD,EAAGtD,MAAOO,GAAWA,S,iBCqBpEiD,E,4MAvCXC,MAAQ,CACJlF,KAAM,GACNgC,QAAS,I,EASbsC,oB,uCAAsB,WAAOtC,GAAP,eAAAC,EAAA,sEAGQF,EAAUC,GAHlB,OAGZmD,EAHY,OAOlB,EAAKC,SAAS,CAAEpF,KAAKmF,EAAcnD,QAASA,IAP1B,2C,wPALQD,I,OAApBoD,E,OAENE,KAAKD,SAAS,CAAEpF,KAAKmF,I,qIAehB,IAAD,EAEqBE,KAAKH,MAAtBlF,EAFJ,EAEIA,KAAKgC,EAFT,EAESA,QAEb,OACI,yBAAK3B,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOgF,MAAOC,IAAKC,IAAaC,IAAI,aACpD,kBAAC,EAAD,CAAOzF,KAAOA,IACd,kBAAC,EAAD,CAAesE,oBAAqBe,KAAKf,sBACzC,kBAAC,EAAD,CAAOtE,KAAMA,EAAMgC,QAASA,S,GAlC1B0D,IAAMC,WCJxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDlG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.53e2a267.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"infected\":\"Cards_infected__bZ078\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","import React from 'react'\nimport { Card, Typography, Grid } from '@material-ui/core';\nimport CardComponent  from '@material-ui/core/Card';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\n\nimport styles from './Cards.module.css';\n\n\nconst Cards = ( { data: { confirmed, recovered,deaths, lastUpdate } } ) => { \n    //have to destructure sent prop (data) first, otherwise four parameters won't work\n    \n    if(!confirmed){\n        return \"loading...\";\n    }\n    return(\n        <div className= {styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card,styles.infected)} >\n                    <CardComponent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant= \"h5\">  \n                            <CountUp start={0} end = {confirmed.value} duration = {2.5} separator = \",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of COVID-19 cases</Typography>\n                    </CardComponent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card,styles.recovered)} >\n                    <CardComponent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant= \"h5\">\n                            <CountUp start={0} end = {recovered.value} duration = {2.5} separator = \",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19.</Typography>\n                    </CardComponent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className = {cx(styles.card,styles.deaths)} >\n                    <CardComponent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant= \"h5\">\n                            <CountUp start={0} end = {deaths.value} duration = {2.5} separator = \",\"/>   \n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19.</Typography>\n                    </CardComponent>\n                </Grid>\n\n            </Grid>\n            \n\n        </div>\n    );\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = \"https://covid19.mathdro.id/api\"\n\nexport const fetchData = async (country) => {\n\n    let changedURL = url;\n    if(country){\n        if(country === \"global\"){\n            changedURL = url;\n\n        }\n        else{\n            changedURL = `${url}/countries/${country}`\n        }\n        \n    }\n    \n    try{\n        const { data: { confirmed,deaths,recovered,lastUpdate } } = await axios.get(changedURL);\n\n        const modified_Data = { confirmed, deaths, recovered, lastUpdate };\n        return modified_Data;\n\n    }catch(error){\n        console.log(error);\n    }\n\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n        // console.log(data)\n        const modified_Data = data.map((dailyData) => ({ \n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date : dailyData.reportDate\n        }));\n        return modified_Data;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data } = await axios.get(`${url}/countries`)\n        // const modified_Data = data.map((countryData) => ({ \n        //     cont_: countryData.countries.names\n\n        // }));\n\n        return data.countries.map( ( country ) => country.name )\n        // return modified_Data\n        // console.log(response)\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n// export const fetchData = async () => {\n//     try{\n//         const { data } = await axios.get(url);\n\n//         const modified_Data = {\n//             confirmed: data.confirmed,\n//             deaths: data.deaths,\n//             recovered: data.recovered,\n//             lastUpdate: data.lastUpdate\n//         }\n//         return modified_Data\n\n//     }catch(error){\n\n//     }\n\n// }","import React ,{ useState, useEffect } from 'react'\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\nconst Chart = ( { data : { confirmed,deaths,recovered } , country } ) => {\n    \n    if(country === \"global\"){\n        country = ''\n    }\n    const [dailyData, setdailyData] = useState([]);\n    useEffect( () => {\n\n        const fetchAPI = async () => {\n            const DailyData = await fetchDailyData();\n            setdailyData(DailyData);\n        }\n\n        // console.log(dailyData)\n\n        fetchAPI();\n\n\n    }, []);\n\n    const lineChart = (\n        dailyData.length\n        ? (\n        <Line \n           data = {{\n            labels: dailyData.map(({ date }) => date ),\n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed ),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true\n\n            },{\n                data: dailyData.map(({ deaths }) => deaths ),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255,0,0,0.5)',\n                fill: true\n\n            }]\n           }} \n        />\n        ): null\n    );\n    const barChart = (\n        confirmed\n        ?   (\n            \n            <Bar\n                data = {{\n                    labels: ['Infected','Recovered','Deaths'],\n                    datasets: [{\n                        label: 'Number of People',\n                        backgroundColor: ['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\n                        data:[confirmed.value, recovered.value, deaths.value]\n                    }]\n                    \n                }}\n                options = {{\n                    legend: {display:false},\n                    title: {display:true,text: `Current state in ${country}` }\n                }}\n            />\n        ) : null\n    );\n\n    return(\n        <div className={styles.container}>\n            {\n                country ? barChart : lineChart\n            }\n        </div>\n    )\n}\n\nexport default Chart","import React, { useState, useEffect }  from 'react'\nimport {NativeSelect, FormControl} from '@material-ui/core'\nimport { fetchCountries } from '../../api'\n\nimport styles from './CountryPicker.module.css'\n\nconst CountryPicker = ( {handleCountryChange} ) => {\n\n    const [countryData, setcountryData] = useState([]);\n    useEffect( () => {\n\n        const fetchAPI = async () => {\n            setcountryData(await fetchCountries());\n        }\n\n        // console.log(countryData)\n\n        fetchAPI();\n\n\n    }, [setcountryData]);\n\n    // console.log(countryData)\n\n    return(\n        \n        <FormControl className={styles.FormControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value) }>\n                <option value=\"global\">Global</option>\n                {countryData.map((country, i) => <option key={i} value={country} >{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n        \n    )\n}\n\nexport default CountryPicker","import React from 'react'\n\nimport styles from './App.module.css'\n\nimport { Cards, Chart, CountryPicker } from './Components'\nimport { fetchData } from './api'\n\nimport coronaImage from './Images/Image.png';\n\nclass App extends React.Component{\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n\n        this.setState({ data:fetchedData });\n    }\n\n    handleCountryChange = async (country) => {\n\n        // console.log(country)\n        const fetchedData = await fetchData(country)\n\n        // console.log(fetchedData)\n\n        this.setState({ data:fetchedData , country: country });\n        //fetch the data\n        //set the state\n    }\n\n    render(){\n\n        const { data,country } = this.state;\n\n        return(\n            <div className={styles.container}>\n                <img className={styles.Image} src={coronaImage} alt=\"Covid-19\" />\n                <Cards data={ data } />\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Chart data={data} country={country} />\n            </div>\n        )\n        \n    }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"Image\":\"App_Image__3UPXw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__24Krj\"};","module.exports = __webpack_public_path__ + \"static/media/Image.d8f69ff6.png\";"],"sourceRoot":""}